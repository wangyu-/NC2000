#pragma once

#include "ibus6502.h"

typedef bool boolean;
typedef long long __int64;
typedef unsigned char byte;

class C6502 {
public:
	int A;
    int X;
    int Y;
    int P;
    int SP;
    int PC;

    IBus6502* bus;

    boolean irqPending;
    boolean nmiPending;
    boolean nmiRequest;
    int clk;
    unsigned int lineclk;
    __int64 total_cycles;

public:
	C6502(IBus6502* bus);
	void reset();
	void exec(int cycle);
	int exec2(int max_instructions, int max_cycles);
	void NMI();
	void IRQ();
	__int64 getTotalCycles();
	void getInfo(char info[]);
	int dasm(int address,char *s);

private:
	void doNMI();
	void doIRQ();
	int getCode();
	int getCodeW();
	int readAddress(int address);
	void XXX_xx();
	void BRK_00();
	void NOP_ea();
	void BIT_24();
	void BIT_2c();
	void BPL_10();
	void BMI_30();
	void BCC_90();
	void BCS_b0();
	void BNE_d0();
	void BEQ_f0();
	void BVC_50();
	void BVS_70();
	void CLC_18();
	void CLD_d8();
	void CLI_58();
	void CLV_b8();
	void SEC_38();
	void SED_f8();
	void SEI_78();
	void JMP_4c();
	void JMP_6c();
	void JSR_20();
	void RTI_40();
	void RTS_60();
	void PHA_48();
	void PHP_08();
	void PLA_68();
	void PLP_28();
	void LDA_a9();
	void LDA_a5();
	void LDA_b5();
	void LDA_ad();
	void LDA_bd();
	void LDA_b9();
	void LDA_a1();
	void LDA_b1();
	void LDX_a2();
	void LDX_a6();
	void LDX_b6();
	void LDX_ae();
	void LDX_be();
	void LDY_a0();
	void LDY_a4();
	void LDY_b4();
	void LDY_ac();
	void LDY_bc();
	void STA_85();
	void STA_95();
	void STA_8d();
	void STA_9d();
	void STA_99();
	void STA_81();
	void STA_91();
	void STX_86();
	void STX_96();
	void STX_8e();
	void STY_84();
	void STY_94();
	void STY_8c();
	void TAX_aa();
	void TAY_a8();
	void TSX_ba();
	void TXA_8a();
	void TXS_9a();
	void TYA_98();
	void INX_e8();
	void INY_c8();
	void DEX_ca();
	void DEY_88();
	void DEC_c6();
	void DEC_d6();
	void DEC_ce();
	void DEC_de();
	void INC_e6();
	void INC_f6();
	void INC_ee();
	void INC_fe();
	void CMP_c9();
	void CMP_c5();
	void CMP_d5();
	void CMP_cd();
	void CMP_dd();
	void CMP_d9();
	void CMP_c1();
	void CMP_d1();
	void CPX_e0();
	void CPX_e4();
	void CPX_ec();
	void CPY_c0();
	void CPY_c4();
	void CPY_cc();
	void AND_29();
	void AND_25();
	void AND_35();
	void AND_2d();
	void AND_3d();
	void AND_39();
	void AND_21();
	void AND_31();
	void EOR_49();
	void EOR_45();
	void EOR_55();
	void EOR_4d();
	void EOR_5d();
	void EOR_59();
	void EOR_41();
	void EOR_51();
	void ORA_09();
	void ORA_05();
	void ORA_15();
	void ORA_0d();
	void ORA_1d();
	void ORA_19();
	void ORA_01();
	void ORA_11();
	void ROL_26();
	void ROL_36();
	void ROL_2e();
	void ROL_3e();
	void ROL_2a();
	void ROR_66();
	void ROR_76();
	void ROR_6e();
	void ROR_7e();
	void ROR_6a();
	void ASL_06();
	void ASL_16();
	void ASL_0e();
	void ASL_1e();
	void ASL_0a();
	void LSR_46();
	void LSR_56();
	void LSR_4e();
	void LSR_5e();
	void LSR_4a();
	void ADC_69();
	void ADC_65();
	void ADC_75();
	void ADC_6d();
	void ADC_7d();
	void ADC_79();
	void ADC_61();
	void ADC_71();
	void SBC_e9();
	void SBC_e5();
	void SBC_f5();
	void SBC_ed();
	void SBC_fd();
	void SBC_f9();
	void SBC_e1();
	void SBC_f1();

	int EA_AX();
	int EA_AY();
	int EA_IX();
	int EA_IY();
	int asl(int dt);
	int lsr(int dt);
	int rol(int dt);
	int ror(int dt);
	void add(int dt);
	void sub(int dt);
	void cmp(int i, int j);
	void rel_jmp(int flagNum, boolean flagVal);
	void push(int value);
	void pushW(int value);
	int pop();
	int popW();
	void doCode(int code);

	void toSei();
	void toCli();
};
