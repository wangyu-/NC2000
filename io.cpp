#include "comm.h"
#include "mem.h"
#include "state.h"
#include "io.h"
#include "nand.h"
#include "dsp.h"

extern nc1020_states_t nc1020_states;

Dsp dsp;

unsigned char test_data[]={
0x02,0xa0,
0x20,0xc2,
0xa0,0xc4,
0x05,0xc8,
0x44,0x02,
0x77,0x12,
0x24,0x29,
0x00,0x30,
0xc4,0x40,
0x4d,0x53,
0x10,0x30,
0x59,0x41,
0x60,0x50,
0x96,0x30,
0x03,0x42,
0x90,0x51,
0x16,0x30,
0x71,0x42,
0xaf,0x51,
0x54,0x03,
0x56,0x13,
0x65,0x2d,
0xbe,0x30,
0xda,0x40,
0x9f,0x51,
0x0f,0x30,
0xc7,0x40,
0xae,0x52,
0xbc,0x30,
0x07,0x40,
0x8c,0x53,
0x16,0x30,
0x5f,0x40,
0x9e,0x53,
0xe5,0x03,
0x36,0x13,
0xa5,0x2b,
0xc1,0x30,
0x05,0x41,
0xbd,0x50,
0x11,0x30,
0x55,0x42,
0xbe,0x51,
0xc1,0x30,
0x1a,0x40,
0x9d,0x50,
0x10,0x30,
0x22,0x40,
0x7b,0x53,
0xe5,0x03,
0x36,0x13,
0x9d,0x2b,
0xc1,0x30,
0x7c,0x42,
0x9d,0x51,
0x0f,0x30,
0xa9,0x40,
0xbd,0x52,
0xbe,0x30,
0xa5,0x41,
0x9e,0x51,
0x0d,0x30,
0x06,0x40,
0x99,0x53,
0x65,0x04,
0x36,0x13,
0x9d,0x2b,
0xbb,0x30,
0xa5,0x40,
0x8d,0x50,
0x0e,0x30,
0x34,0x43,
0x8e,0x50,
0xb6,0x30,
0x08,0x42,
0x8d,0x50,
0x0f,0x30,
0xa4,0x43,
0x8d,0x52,
0xe5,0x03,
0x46,0x12,
0xd5,0x2a,
0xb4,0x30,
0x55,0x41,
0x8e,0x52,
0x0a,0x30,
0x12,0x40,
0x9b,0x53,
0xab,0x30,
0x16,0x41,
0x7b,0x50,
0x0f,0x30,
0x0a,0x40,
0x7e,0x50,
0x00,0xc1,
0x02,0xa0,
0xb6,0xc2,
0x7e,0xc4,
0x04,0xc8,
0xbb,0x03,
0x98,0x13,
0x5b,0x2d,
0xcc,0x30,
0x32,0x43,
0x2f,0x51,
0x14,0x30,
0xae,0x41,
0x2a,0x50,
0xcf,0x30,
0x8a,0x40,
0x3f,0x53,
0x0e,0x30,
0xa4,0x43,
0x6f,0x52,
0x99,0x01,
0xa8,0x14,
0x14,0x2b,
0xca,0x30,
0x04,0x42,
0x4f,0x51,
0x0c,0x30,
0x70,0x40,
0x56,0x53,
0xc4,0x30,
0xf5,0x42,
0x5f,0x50,
0x09,0x30,
0x27,0x43,
0x5c,0x51,
0xa9,0x01,
0x97,0x13,
0x54,0x2b,
0xc0,0x30,
0x02,0x43,
0x5c,0x52,
0x16,0x30,
0x7e,0x40,
0x58,0x51,
0xca,0x30,
0x68,0x40,
0x5b,0x51,
0x0a,0x30,
0x06,0x42,
0x48,0x50,
0xa0,0x03,
0x98,0x13,
0x54,0x29,
0xc6,0x30,
0xba,0x40,
0x46,0x53,
0x13,0x30,
0xff,0x42,
0x36,0x53,
0xcb,0x30,
0xba,0x40,
0x3f,0x50,
0x18,0x30,
0x0b,0x40,
0x36,0x51,
0x3b,0x03,
0x97,0x13,
0xe4,0x28,
0xd9,0x30,
0x01,0x42,
0x36,0x51,
0x0e,0x30,
0x09,0x43,
0x4f,0x50,
0xd0,0x30,
0x00,0x40,
0x36,0x51,
0x11,0x30,
0xf5,0x42,
0x32,0x50,
0x00,0xc1,
0x02,0xa0,
0x5e,0xc2,
0x00,0xc4,
0x05,0xc8,
0x21,0x02,
0xa9,0x15,
0xae,0x2d,
0xcb,0x30,
0x28,0x42,
0x4a,0x51,
0x15,0x30,
0x41,0x43,
0x4b,0x50,
0xc8,0x30,
0x0f,0x42,
0x4b,0x53,
0x16,0x30,
0x43,0x42,
0x5f,0x51,
0xa1,0x01,
0x87,0x12,
0x64,0x2f,
0xca,0x30,
0x24,0x41,
0x4f,0x50,
0x0c,0x30,
0xa7,0x42,
0x49,0x53,
0xc6,0x30,
0xb4,0x42,
0x4c,0x51,
0x14,0x30,
0x25,0x42,
0x4c,0x50,
0x90,0x01,
0x85,0x13,
0x64,0x2f,
0xc8,0x30,
0x3b,0x42,
0x4a,0x52,
0x10,0x30,
0x90,0x40,
0x39,0x52,
0xc7,0x30,
0x0f,0x42,
0x39,0x50,
0x00,0x30,
0x6b,0x41,
0x36,0x50,
0x98,0x02,
0x77,0x12,
0x64,0x2f,
0xce,0x30,
0x9a,0x43,
0x39,0x50,
0x0b,0x30,
0xa1,0x42,
0x3a,0x51,
0xcf,0x30,
0x9f,0x40,
0x3b,0x50,
0x0d,0x30,
0x24,0x42,
0x37,0x51,
0x20,0x03,
0x76,0x12,
0x5c,0x2b,
0xd4,0x30,
0x0a,0x40,
0x36,0x51,
0x0e,0x30,
0x80,0x43,
0x29,0x50,
0xc0,0x30,
0x0b,0x40,
0x35,0x51,
0x01,0x30,
0x44,0x40,
0x39,0x51,
0x00,0xc1,
0x02,0xa0,
0x00,0xc2,
0x00,0xc4,
0x17,0xc8,
0xa9,0x03,
0x97,0x15,
0xee,0x2c,
0x33,0x30,
0xed,0x40,
0x5d,0x53,
0x19,0x30,
0x00,0x42,
0x5d,0x50,
0x4a,0x30,
0x28,0x40,
0x59,0x53,
0x14,0x30,
0x08,0x43,
0x58,0x50,
0xa2,0x02,
0x97,0x14,
0x25,0x2d,
0xed,0x30,
0xc7,0x40,
0x56,0x51,
0x14,0x30,
0x0f,0x41,
0x64,0x50,
0xf8,0x30,
0x19,0x42,
0x56,0x53,
0x10,0x30,
0x44,0x41,
0x5b,0x52,
0x41,0x05,
0x89,0x13,
0x5c,0x2b,
0x9f,0x30,
0x1a,0x41,
0x45,0x53,
0x02,0x30,
0x78,0x40,
0x48,0x52,
0x1e,0x30,
0x18,0x40,
0x3e,0x52,
0x06,0x30,
0x44,0x40,
0x44,0x51,
0x19,0x03,
0x55,0x11,
0x24,0x2b,
0x1b,0x30,
0x0a,0x40,
0x52,0x51,
0x0e,0x30,
0xaf,0x42,
0x36,0x51,
0x8d,0x30,
0xe4,0x40,
0x4d,0x50,
0x0a,0x30,
0xfd,0x42,
0x5f,0x51,
0xcb,0x03,
0x46,0x12,
0x25,0x25,
0x87,0x30,
0xc5,0x42,
0x8f,0x51,
0x16,0x30,
0xe2,0x42,
0xdf,0x51,
0x8b,0x30,
0x8e,0x40,
0xaf,0x50,
0x14,0x30,
0x9f,0x41,
0xbf,0x51,
0xcb,0x03,
0x46,0x11,
0x25,0x25,
0x8e,0x30,
0xa8,0x42,
0x9f,0x50,
0x10,0x30,
0xe9,0x40,
0x9c,0x51,
0x8d,0x30,
0xa5,0x41,
0x6d,0x51,
0x11,0x30,
0xde,0x40,
0x7d,0x50,
0xcb,0x03,
0x46,0x12,
0x2d,0x25,
0x8d,0x30,
0x63,0x42,
0x6e,0x51,
0x12,0x30,
0x6a,0x41,
0x7d,0x50,
0x8d,0x30,
0x5f,0x43,
0x6e,0x52,
0x11,0x30,
0x31,0x43,
0x6e,0x50,
0x4b,0x03,
0x46,0x12,
0x2d,0x27,
0x8e,0x30,
0x6a,0x40,
0x7d,0x50,
0x10,0x30,
0xb7,0x42,
0x7d,0x50,
0x8e,0x30,
0x77,0x40,
0x7c,0x50,
0x0f,0x30,
0x67,0x41,
0x6d,0x52,
0x43,0x03,
0x46,0x12,
0x2d,0x27,
0x8e,0x30,
0x19,0x42,
0x7d,0x50,
0x11,0x30,
0x4b,0x41,
0x7d,0x52,
0x90,0x30,
0xbb,0x40,
0x7c,0x50,
0x11,0x30,
0x26,0x40,
0x7d,0x50,
0xba,0x02,
0x56,0x12,
0x25,0x25,
0x94,0x30,
0x13,0x42,
0x7b,0x52,
0x13,0x30,
0x0c,0x40,
0x7b,0x50,
0x99,0x30,
0x55,0x40,
0x7c,0x52,
0x16,0x30,
0x06,0x40,
0x7b,0x50,
0xba,0x02,
0x57,0x12,
0x64,0x29,
0xa3,0x30,
0x81,0x41,
0x7c,0x50,
0x12,0x30,
0x49,0x40,
0x5a,0x52,
0xab,0x30,
0x21,0x42,
0x5c,0x53,
0x13,0x30,
0x98,0x40,
0x6c,0x50,
0x31,0x02,
0x76,0x13,
0x6c,0x29,
0xb4,0x30,
0x4e,0x41,
0x4c,0x52,
0x16,0x30,
0x12,0x42,
0x4b,0x53,
0xbd,0x30,
0x63,0x42,
0x5a,0x50,
0x10,0x30,
0x29,0x40,
0x48,0x52,
0x29,0x02,
0x85,0x15,
0xdd,0x24,
0xc0,0x30,
0x8b,0x40,
0x3a,0x53,
0x12,0x30,
0x5a,0x42,
0x3a,0x50,
0xc1,0x30,
0xa0,0x42,
0x3c,0x52,
0x11,0x30,
0x9d,0x42,
0x3a,0x52,
0x21,0x02,
0x95,0x15,
0xdd,0x24,
0xc3,0x30,
0x23,0x42,
0x3c,0x50,
0x11,0x30,
0x4c,0x43,
0x3d,0x52,
0xc5,0x30,
0xb0,0x41,
0x3d,0x52,
0x0f,0x30,
0x21,0x40,
0x3a,0x51,
0x21,0x02,
0x84,0x15,
0xdd,0x24,
0xc6,0x30,
0x10,0x40,
0x3d,0x50,
0x0f,0x30,
0x5c,0x41,
0x3c,0x50,
0xc5,0x30,
0xd0,0x42,
0x3d,0x50,
0x11,0x30,
0x66,0x42,
0x3a,0x53,
0x99,0x01,
0x85,0x15,
0x9d,0x26,
0xc8,0x30,
0x8d,0x42,
0x3d,0x51,
0x10,0x30,
0xa8,0x40,
0x3c,0x50,
0xc8,0x30,
0x73,0x40,
0x2c,0x52,
0x11,0x30,
0x13,0x43,
0x3c,0x50,
0x99,0x01,
0x95,0x15,
0x9d,0x26,
0xc9,0x30,
0x10,0x42,
0x3d,0x50,
0x0f,0x30,
0xfd,0x40,
0x3d,0x50,
0xca,0x30,
0x0d,0x40,
0x3d,0x50,
0x0f,0x30,
0xff,0x42,
0x3d,0x50,
0x99,0x01,
0x95,0x15,
0x5d,0x28,
0xc9,0x30,
0x6c,0x42,
0x2f,0x50,
0x11,0x30,
0x04,0x41,
0x3c,0x52,
0xcb,0x30,
0x4b,0x41,
0x3d,0x52,
0x11,0x30,
0x5a,0x42,
0x3e,0x51,
0xa1,0x01,
0xa5,0x14,
0x24,0x29,
0xcb,0x30,
0x45,0x40,
0x3c,0x52,
0x11,0x30,
0x27,0x40,
0x3d,0x50,
0xcc,0x30,
0xe9,0x40,
0x3f,0x50,
0x0d,0x30,
0x71,0x40,
0x3b,0x51,
0x21,0x02,
0xa7,0x13,
0x24,0x29,
0xcb,0x30,
0x6f,0x41,
0x3f,0x50,
0x11,0x30,
0x03,0x42,
0x3f,0x52,
0xcc,0x30,
0xfc,0x40,
0x3d,0x51,
0x11,0x30,
0x1a,0x41,
0x4f,0x51,
0x10,0x02,
0x86,0x13,
0x24,0x2b,
0xce,0x30,
0xe5,0x42,
0x49,0x50,
0x0e,0x30,
0x7e,0x40,
0x38,0x50,
0xcd,0x30,
0x8f,0x42,
0x37,0x53,
0x0e,0x30,
0x27,0x42,
0x3c,0x52,
0x88,0x01,
0x87,0x12,
0x24,0x29,
0xc9,0x30,
0x0f,0x42,
0x3d,0x52,
0x12,0x30,
0x1d,0x41,
0x37,0x51,
0xc8,0x30,
0xa0,0x43,
0x3d,0x51,
0x08,0x30,
0x0b,0x40,
0x3a,0x51,
0x18,0x03,
0x76,0x12,
0xe4,0x28,
0xd6,0x30,
0x08,0x40,
0x34,0x51,
0x09,0x30,
0x1a,0x43,
0x26,0x50,
0xd6,0x30,
0x6a,0x42,
0x29,0x50,
0x0c,0x30,
0x32,0x42,
0x2a,0x50,
0x00,0xc3,
0x00,0xe0,
0x00,0xe0,
0x00,0x80,
};

void dsp_test(){
    printf("==============================================\n");
    dsp.reset();
    for(int i=0;i<sizeof(test_data)/2;i++){
        dsp.write(test_data[i*2+1], test_data[i*2]);
    }
}

static bool& slept = nc1020_states.slept;
static bool& should_wake_up = nc1020_states.should_wake_up;

static uint8_t* keypad_matrix = nc1020_states.keypad_matrix;
static uint32_t& lcd_addr = nc1020_states.lcd_addr;

static uint8_t* jg_wav_buff = nc1020_states.jg_wav_data;
static uint8_t& jg_wav_flags = nc1020_states.jg_wav_flags;
static uint8_t& jg_wav_index = nc1020_states.jg_wav_idx;
static bool& jg_wav_playing = nc1020_states.jg_wav_playing;

io_read_func_t io_read[0x40];
io_write_func_t io_write[0x40];

struct BeeperSignal{
    long long cycle;
    int value;
}last_beeper{0};

//deque<BeeperSignal> beeper_signal;
//long long last_beeper_cycle=0;
deque<signed short> sound_stream;
void init_io(){
    for (uint32_t i=0; i<IO_LIMIT; i++) {
		io_read[i] = ReadXX;
		io_write[i] = WriteXX;
	}
	io_read[0x06] = Read06;
	io_read[0x3B] = Read3B;
	io_read[0x3F] = Read3F;
	io_write[0x00] = Write00;
	io_write[0x05] = Write05;
	io_write[0x06] = Write06;
	io_write[0x08] = Write08;
	io_write[0x09] = Write09;
	io_write[0x0A] = Write0A;
	io_write[0x0D] = Write0D;
	io_write[0x0F] = Write0F;
	io_write[0x20] = Write20;
	//io_write[0x23] = Write23;
	io_write[0x3F] = Write3F;

}

uint8_t IO_API ReadXX(uint8_t addr){
	if(addr==0x18&&0){
		return ram_io[0x18]&0xbc;
	}
	if(addr==0x29) {
        return read_nand();
	}

    //printf("read unknow IO %02x ,value=%02x\n",addr, ram_io[addr]);

    if(addr==0x03){
        return 0xff;
    }
	return ram_io[addr];
}



uint8_t IO_API Read06(uint8_t addr){
	return ram_io[addr];
}

uint8_t IO_API Read3B(uint8_t addr){
    if (!(ram_io[0x3D] & 0x03)) {
        return nc1020_states.clock_buff[0x3B] & 0xFE;
    }
    return ram_io[addr];
}

uint8_t IO_API Read3F(uint8_t addr){
    uint8_t idx = ram_io[0x3E];
    return idx < 80 ? nc1020_states.clock_buff[idx] : 0;
}

void manipulate_beeper(int a){
            long long current_cycle=nc1020_states.previous_cycles+nc1020_states.cycles;
            long long samples_start=last_beeper.cycle*AUDIO_HZ/CYCLES_SECOND;
            long long samples_end=current_cycle*AUDIO_HZ/CYCLES_SECOND;
            //printf("%lld, %d  %lld %lld\n",current_cycle -last_beeper.cycle, nc1020_states.cycles, samples_start,samples_end);
            last_beeper.cycle=current_cycle;

            for(int i=0;i<(samples_end-samples_start);i++){
                sound_stream.push_back(8000*last_beeper.value);
            }
            last_beeper.value=a;
}

void manipulate_beeper2(){
    long long current_cycle=nc1020_states.previous_cycles+nc1020_states.cycles;
   // printf("<%lld>\n",current_cycle);
    manipulate_beeper(last_beeper.value);
}
void IO_API WriteXX(uint8_t addr, uint8_t value){
	if(addr==0x29) {
        return nand_write(value);
    }

    if(addr==0x30){
        if (value==0x80 || value==0x40){
            dsp.reset();
        }
    }

    if(addr==0x18){
        int a= value>>7;
        if(a==0) a=-1;

        if (a!=last_beeper.value){
            long long current_cycle=nc1020_states.previous_cycles+nc1020_states.cycles;
            //printf("%lld %lld, %d!!!!!!!!!!!\n",current_cycle, last_beeper.cycle, a);
        }
        if(true)
        {
            manipulate_beeper(a);
        }
        /*if(beeper_signal.empty()||a!=beeper_signal.back().value) {
            printf("[beeper %d, at %lld]\n",a,nc1020_states.previous_cycles+ nc1020_states.cycles);
            beeper_signal.push_back({nc1020_states.previous_cycles+ nc1020_states.cycles, a});
        }*/
        //printf("<write 0x18 %02x>\n",value);
    }
    
    /*if(addr>=0x30 && addr<=0x3a){
      printf("{z %04x %02x}\n",addr,value);
      return; 
    }*/
    
    if(addr==0x32) {
      //printf("<w %02x>",value);
      //return;
    }
    else if(addr==0x33){
      //printf("[w %02x]\n",value);
      extern string udp_msg;
      dsp.write(value, ram_io[0x32]);
      if(value==0x14) {
        //udp_msg="dump 0280 100";
      }
      //return;
    } 

    //printf("write unknow IO %02x ,value=%02x\n",addr, value);

    ram_io[addr] = value;
}


// switch bank.
void IO_API Write00(uint8_t addr, uint8_t value){
    uint8_t old_value = ram_io[addr];
    ram_io[addr] = value;
	/*
    if (value != old_value) {
    	SwitchBank();
    }*/
	super_switch();
}

void IO_API Write05(uint8_t addr, uint8_t value){
	uint8_t old_value = ram_io[addr];
	ram_io[addr] = value;
	if ((old_value ^ value) & 0x08) {
		slept = !(value & 0x08);
	}
}


void IO_API Write06(uint8_t addr, uint8_t value){
    ram_io[addr] = value;
    if (!lcd_addr||true) {
    	lcd_addr = ((ram_io[0x0C] & 0x03) << 12) | (value << 4);
		printf("lcd_addr=%x\n",lcd_addr);
        if(lcd_addr==0x1380){
            nc1020_states.grey_mode=1;
        }else{
             nc1020_states.grey_mode=0;
        }
    }
    ram_io[0x09] &= 0xFE;
}

void IO_API Write08(uint8_t addr, uint8_t value){
    ram_io[addr] = value;
    ram_io[0x0B] &= 0xFE;
}

// keypad matrix.
void IO_API Write09(uint8_t addr, uint8_t value){
    ram_io[addr] = value;
    switch (value){
    case 0x01: ram_io[0x08] = keypad_matrix[0]; break;
    case 0x02: ram_io[0x08] = keypad_matrix[1]; break;
    case 0x04: ram_io[0x08] = keypad_matrix[2]; break;
    case 0x08: ram_io[0x08] = keypad_matrix[3]; break;
    case 0x10: ram_io[0x08] = keypad_matrix[4]; break;
    case 0x20: ram_io[0x08] = keypad_matrix[5]; break;
    case 0x40: ram_io[0x08] = keypad_matrix[6]; break;
    case 0x80: ram_io[0x08] = keypad_matrix[7]; break;
    case 0:
        ram_io[0x0B] |= 1;
        if (keypad_matrix[7] == 0xFE) {
            ram_io[0x0B] &= 0xFE;
        }
        break;
    case 0x7F:
        if (ram_io[0x15] == 0x7F) {
            ram_io[0x08] = (
                keypad_matrix[0] |
                keypad_matrix[1] |
                keypad_matrix[2] |
                keypad_matrix[3] |
                keypad_matrix[4] |
                keypad_matrix[5] |
                keypad_matrix[6] |
                keypad_matrix[7]
            );
        }
        break;
    }
}

// roabbs
void IO_API Write0A(uint8_t addr, uint8_t value){
    uint8_t old_value = ram_io[addr];
    ram_io[addr] = value;
	/*
    if (value != old_value) {
        memmap[6] = bbs_pages[value & 0x0F];
    }*/
	super_switch();
}

// switch volume
void IO_API Write0D(uint8_t addr, uint8_t value){
	uint8_t old_value = ram_io[addr];
    ram_io[addr] = value;
	/*
    if (value != old_value) {
        SwitchVolume();
    }*/
	super_switch();
}

// zp40 switch
void IO_API Write0F(uint8_t addr, uint8_t value){
	uint8_t old_value = ram_io[addr];
    ram_io[addr] = value;
    //old_value &= 0x07;
    //value &= 0x07;
	/*
    if (value != old_value) {
        uint8_t* ptr_new = GetPtr40(value);
        if (old_value) {
            memcpy(GetPtr40(old_value), ram_40, 0x40);
            memcpy(ram_40, value ? ptr_new : bak_40, 0x40);
        } else {
            memcpy(bak_40, ram_40, 0x40);
            memcpy(ram_40, ptr_new, 0x40);
        }
    }*/
	super_switch();
}

void IO_API Write20(uint8_t addr, uint8_t value){
    ram_io[addr] = value;
    if (value == 0x80 || value == 0x40) {
        memset(jg_wav_buff, 0, 0x20);
        ram_io[0x20] = 0;
        jg_wav_flags = 1;
        jg_wav_index = 0;
    }
}

void GenerateAndPlayJGWav(){
}

void IO_API Write23(uint8_t addr, uint8_t value){
    ram_io[addr] = value;
    if (value == 0xC2) {
        jg_wav_buff[jg_wav_index] = ram_io[0x22];
    } else if (value == 0xC4) {
        if (jg_wav_index < 0x20) {
            jg_wav_buff[jg_wav_index] = ram_io[0x22];
            jg_wav_index ++;
        }
    } else if (value == 0x80) {
        ram_io[0x20] = 0x80;
        jg_wav_flags = 0;
        if (jg_wav_index) {
            if (!jg_wav_playing) {
                GenerateAndPlayJGWav();
                jg_wav_index = 0;
            }
        }
    }
    if (jg_wav_playing) {
        // todo.
    }
}

// clock.
void IO_API Write3F(uint8_t addr, uint8_t value){
    uint8_t* clock_buff = nc1020_states.clock_buff;
	uint8_t& clock_flags = nc1020_states.clock_flags;
    ram_io[addr] = value;
    uint8_t idx = ram_io[0x3E];
    if (idx >= 0x07) {
        if (idx == 0x0B) {
            ram_io[0x3D] = 0xF8;
            clock_flags |= value & 0x07;
            clock_buff[0x0B] = value ^ ((clock_buff[0x0B] ^ value) & 0x7F);
        } else if (idx == 0x0A) {
            clock_flags |= value & 0x07;
            clock_buff[0x0A] = value;
        } else {
            clock_buff[idx % 80] = value;
        }
    } else {
        if (!(clock_buff[0x0B] & 0x80) && idx < 80) {
            clock_buff[idx] = value;
        }
    }
}
